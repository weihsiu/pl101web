// Generated by CoffeeScript 1.3.1
var evalScheem, evalScheemString, fs, parse, peg;

if (typeof module !== "undefined" && module !== null) {
  peg = require('pegjs');
  fs = require('fs');
  parse = peg.buildParser(fs.readFileSync('src/scheem.pegjs', 'utf-8')).parse;
} else {
  parse = Scheem.parse;
}

evalScheem = function(expr, env) {
  var e, list;
  if (typeof expr === 'number') {
    return expr;
  } else if (typeof expr === 'string') {
    if (!env.hasOwnProperty(expr)) {
      throw "variable " + expr + " is not bound";
    }
    return env[expr];
  } else {
    switch (expr[0]) {
      case 'define':
        env[expr[1]] = evalScheem(expr[2], env);
        return 0;
      case 'set!':
        if (!env.hasOwnProperty(expr[1])) {
          throw "variable " + expr[1] + " is not defined";
        }
        env[expr[1]] = evalScheem(expr[2], env);
        return 0;
      case '+':
        return evalScheem(expr[1], env) + evalScheem(expr[2], env);
      case '-':
        return evalScheem(expr[1], env) - evalScheem(expr[2], env);
      case '*':
        return evalScheem(expr[1], env) * evalScheem(expr[2], env);
      case '/':
        return evalScheem(expr[1], env) / evalScheem(expr[2], env);
      case '=':
        if (evalScheem(expr[1], env) === evalScheem(expr[2], env)) {
          return '#t';
        } else {
          return '#f';
        }
        break;
      case '<':
        if (evalScheem(expr[1], env) < evalScheem(expr[2], env)) {
          return '#t';
        } else {
          return '#f';
        }
        break;
      case 'quote':
        return expr[1];
      case 'begin':
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = expr.slice(1);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push(evalScheem(e, env));
          }
          return _results;
        })()).slice(-1)[0];
      case 'cons':
        list = evalScheem(expr[2], env);
        list.unshift(evalScheem(expr[1], env));
        return list;
      case 'car':
        return evalScheem(expr[1], env)[0];
      case 'cdr':
        return evalScheem(expr[1], env).slice(1);
      case 'if':
        if (evalScheem(expr[1], env) === '#t') {
          return evalScheem(expr[2], env);
        } else {
          return evalScheem(expr[3], env);
        }
    }
  }
};

evalScheemString = function(scheem, env) {
  return evalScheem(parse(scheem), env);
};

if (typeof module !== "undefined" && module !== null) {
  module.exports.evalScheem = evalScheem;
}

if (typeof module !== "undefined" && module !== null) {
  module.exports.evalScheemString = evalScheemString;
}
